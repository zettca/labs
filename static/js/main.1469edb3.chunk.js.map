{"version":3,"sources":["helpers.js","components/Lab.js","components/App.js","registerServiceWorker.js","index.js"],"names":["monthNames","weekDays","pad0","n","getTime","date","d","Date","getHours","getMinutes","map","join","getDate","concat","getMonth","slice","Lab","_this$props","this","props","day","data","events","curTime","nextClasses","currentClass","forEach","ev","weekday","start","getDay","push","end","sort","a","b","react_default","createElement","className","length","name","cl","i","key","course","acronym","replace","React","PureComponent","DEFAULT_LABS","l","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","labs","store","get","set","state","time","dow","id","nextDay","bind","assertThisInitialized","_this2","dayEntry","getUTCFullYear","getUTCMonth","getUTCDate","getISODate","sundayOffset","setDate","getLastMonday","lab","labEntry","labData","undefined","console","log","setState","fetch","then","res","json","newDow","_this$state","onClick","components_Lab","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_components_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1469edb3.chunk.js","sourcesContent":["export const monthNames = [\n  'January', 'February', 'March', 'April', 'May', 'June',\n  'July', 'August', 'September', 'October', 'November', 'December'\n];\nexport const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport function getLastMonday(date) {\n  const d = date || new Date();\n  const day = d.getDay();\n  const sundayOffset = (d.getDay() === 0) ? 7 : day;\n\n  return new Date(new Date().setDate(d.getDate() - sundayOffset + 1));\n}\n\nexport function pad0(n) {  // padding with 0\n  return n > 9 ? n : '0' + n;\n}\n\nexport function getTime(date) {\n  const d = date || new Date();\n  return [d.getHours(), d.getMinutes()].map(pad0).join(':');\n}\n\nexport function getDate(date) {\n  const d = date || new Date();\n  return `${d.getDate()} ${monthNames[d.getMonth()].slice(0, 3)}`;\n}\n\nexport function getISODate(date) {\n  const d = date || new Date();\n  return [d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate()].map(pad0).join('-');\n}\n","import React from 'react';\nimport { weekDays, getTime } from '../helpers';\n\nclass Lab extends React.PureComponent {\n  render() {\n    const { day, data } = this.props;\n    if (!data) return null;\n\n    const { events } = data;\n    const curTime = getTime();\n    const nextClasses = [];\n    let currentClass = null;\n\n    events.forEach(ev => {\n      if (ev.weekday === weekDays[day].slice(0, 3)) {\n        if (curTime < ev.start || weekDays[day] !== weekDays[new Date().getDay()]) {\n          nextClasses.push(ev);\n        } else if (curTime >= ev.start && curTime <= ev.end) {\n          nextClasses.push(ev);\n          currentClass = ev;\n        }\n      }\n    });\n\n    nextClasses.sort((a, b) => (a.start < b.start) ? -1 : 1);\n\n    return (\n      <div>\n        <h3 className={currentClass ? 'red' : ((nextClasses.length) ? 'blue' : 'green')}>\n          {data.name}\n        </h3>\n        {nextClasses.map((cl, i) => (\n          <span key={i}>\n            <strong>{cl.start} â€“ {cl.end}</strong> {cl.course.acronym.replace(/[^A-Za-z]/g, '')}\n          </span>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Lab;\n","import React from 'react';\nimport store from 'store';\nimport Lab from './Lab';\nimport './App.css';\nimport { weekDays, getTime, getDate, getISODate, getLastMonday } from '../helpers';\n\nconst URL = 'https://web.tecnico.ulisboa.pt/~ist178013/api/labevents/?lab=';\nconst DEFAULT_LABS = [220, 221, 222, 227, 229, 166].map(l => '2448131365' + l);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const labs = store.get('labs') || DEFAULT_LABS;\n    store.set('labs', labs);\n\n    this.state = {\n      date: getDate(),\n      time: getTime(),\n      dow: new Date().getDay(), // day of week\n      labs: labs.map(id => ({ id: id, data: null })),\n    };\n\n    this.nextDay = this.nextDay.bind(this);\n  }\n\n  componentDidMount() {\n    const { labs } = this.state;\n    const dayEntry = getISODate(getLastMonday());\n\n    labs.forEach(lab => {\n      const labEntry = `${lab.id}_${dayEntry}`;\n      const labData = store.get(labEntry);\n\n      if (labData !== undefined) {\n        console.log('Hit localStorage for ' + labEntry);\n        lab.data = labData;\n        this.setState({ labs });\n      } else {\n        fetch(URL + lab.id)\n          .then((res) => res.json())\n          .then((data) => {\n            lab.data = data;\n            store.set(labEntry, data);\n            this.setState({ labs });\n          });\n      }\n    });\n  }\n\n  nextDay() {\n    const { dow } = this.state;\n    const d = new Date();\n    const newDow = ((dow >= 5) ? 0 : dow) + 1;\n    d.setDate(d.getDate() + (newDow - d.getDay()));\n\n    this.setState({\n      date: getDate(d),\n      time: getTime(),\n      dow: newDow,\n    });\n  }\n\n  render() {\n    const { dow, date, time, labs } = this.state;\n\n    return (\n      <main>\n        <header onClick={this.nextDay}>\n          <h3>\n            <span>{`${weekDays[dow].slice(0, 3)}, ${date}`}</span>\n            <span className={'right'}>{time}</span>\n          </h3>\n        </header>\n        <section id=\"infos\">\n          {labs.map((lab) => (lab.data && <Lab key={lab.id} day={dow} data={lab.data} />))}\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}