{"version":3,"sources":["helpers.js","components/Lab.js","components/App.js","registerServiceWorker.js","index.js"],"names":["monthNames","weekDays","pad0","n","getTime","date","d","Date","getHours","getMinutes","map","join","getDate","concat","getMonth","slice","Lab","_this$props","this","props","day","data","events","curTime","nextClasses","currentClass","forEach","ev","course","acronym","replace","weekday","start","getDay","push","end","sort","a","b","react_default","createElement","className","length","name","cl","i","key","React","PureComponent","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","nextDay","bind","assertThisInitialized","state","time","dow","labs","id","_this2","lab","fetch","then","res","json","setState","newDow","setDate","_this$state","onClick","components_Lab","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_components_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gOAAaA,EAAa,CACxB,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE3CC,EAAW,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAMpF,SAASC,EAAKC,GACnB,OAAOA,EAAI,EAAIA,EAAI,IAAMA,EAGpB,SAASC,EAAQC,GACtB,IAAMC,EAAID,GAAQ,IAAIE,KACtB,MAAO,CAACD,EAAEE,WAAYF,EAAEG,cAAcC,IAAIR,GAAMS,KAAK,KAGhD,SAASC,EAAQP,GACtB,IAAMC,EAAID,GAAQ,IAAIE,KACtB,SAAAM,OAAUP,EAAEM,UAAZ,KAAAC,OAAyBb,EAAWM,EAAEQ,YAAYC,MAAM,EAAG,QCsB9CC,mLAvCJ,IAAAC,EACeC,KAAKC,MAAnBC,EADDH,EACCG,IAAKC,EADNJ,EACMI,KACb,IAAKA,EAAM,OAAO,KAFX,IAICC,EAAWD,EAAXC,OACFC,EAAUnB,IACVoB,EAAc,GAChBC,EAAe,KAiBnB,OAfAH,EAAOI,QAAQ,SAAAC,GACbA,EAAGC,OAAOC,QAAqBF,EAAGC,OAAOC,QDPlCC,QAAQ,SAAU,ICSrBH,EAAGI,UAAY9B,EAASmB,GAAKL,MAAM,EAAG,KACpCQ,EAAUI,EAAGK,OAAS/B,EAASmB,KAASnB,GAAS,IAAIM,MAAO0B,UAC9DT,EAAYU,KAAKP,GACRJ,GAAWI,EAAGK,OAAST,GAAWI,EAAGQ,MAC9CX,EAAYU,KAAKP,GACjBF,EAAeE,MAKrBH,EAAYY,KAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEL,MAAQM,EAAEN,OAAU,EAAI,IAGpDO,EAAAF,EAAAG,cAAA,WACED,EAAAF,EAAAG,cAAA,MAAIC,UAAWhB,EAAe,MAAUD,EAAYkB,OAAU,OAAS,SAAvE,OACOrB,EAAKsB,MAEXnB,EAAYd,IAAI,SAACkC,EAAIC,GAAL,OACfN,EAAAF,EAAAG,cAAA,QAAMM,IAAKD,GACTN,EAAAF,EAAAG,cAAA,cAASI,EAAGZ,MAAZ,WAAsBY,EAAGT,KAD3B,IAC0CS,EAAGhB,OAAOC,mBAhC5CkB,IAAMC,eCmETC,qBA9Db,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjC,KAAA+B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjC,KAAAiC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArC,KAAMC,KACDqC,QAAUN,EAAKM,QAAQC,KAAbN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KACfA,EAAKS,MAAQ,CACXtD,KAAMO,IACNgD,KAAMxD,IACNyD,KAAK,IAAItD,MAAO0B,SAChB6B,KAAM,CACJ,CAAEC,GAAI,cAAe1C,KAAM,MAC3B,CAAE0C,GAAI,cAAe1C,KAAM,MAC3B,CAAE0C,GAAI,cAAe1C,KAAM,MAC3B,CAAE0C,GAAI,cAAe1C,KAAM,MAC3B,CAAE0C,GAAI,cAAe1C,KAAM,MAC3B,CAAE0C,GAAI,cAAe1C,KAAM,QAbd6B,oFAkBE,IAAAc,EAAA9C,KACX4C,EAAS5C,KAAKyC,MAAdG,KACRA,EAAKpC,QAAQ,SAAAuC,GACXC,MAxBM,4DAwBMD,EAAIF,IACbI,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAAC9C,GACL4C,EAAI5C,KAAOA,EACX2C,EAAKM,SAAS,CAAER,+CAKd,IACAD,EAAQ3C,KAAKyC,MAAbE,IACFvD,EAAI,IAAIC,KACRgE,GAAWV,GAAO,EAAK,EAAIA,GAAO,EACxCvD,EAAEkE,QAAQlE,EAAEM,WAAa2D,EAASjE,EAAE2B,WAEpCf,KAAKoD,SAAS,CACZjE,KAAMO,EAAQN,GACdsD,KAAMxD,IACNyD,IAAKU,qCAIA,IAAAE,EAC2BvD,KAAKyC,MAA/BE,EADDY,EACCZ,IAAKxD,EADNoE,EACMpE,KAAMuD,EADZa,EACYb,KAAME,EADlBW,EACkBX,KAEzB,OACEvB,EAAAF,EAAAG,cAAA,YACED,EAAAF,EAAAG,cAAA,UAAQkC,QAASxD,KAAKsC,SACpBjB,EAAAF,EAAAG,cAAA,UACED,EAAAF,EAAAG,cAAA,eAAA3B,OAAUZ,EAAS4D,GAAK9C,MAAM,EAAG,GAAjC,MAAAF,OAAwCR,IACxCkC,EAAAF,EAAAG,cAAA,QAAMC,UAAW,SAAUmB,KAG/BrB,EAAAF,EAAAG,cAAA,WAASuB,GAAG,SACTD,EAAKpD,IAAI,SAACuD,GAAD,OAAUA,EAAI5C,MAAQkB,EAAAF,EAAAG,cAACmC,EAAD,CAAK7B,IAAKmB,EAAIF,GAAI3C,IAAKyC,EAAKxC,KAAM4C,EAAI5C,kBAxD9D0B,IAAM6B,YCGlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTjB,KAAK,SAAAqB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/B,QACf0B,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAO5D,EAAAF,EAAAG,cAAC4D,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,IAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAvE,OAAM2F,IAAN,sBAEP3B,GAiDV,SAAiCO,GAE/BlB,MAAMkB,GACHjB,KAAK,SAAAwC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAM7C,KAAK,SAAAqB,GACjCA,EAAayB,aAAa9C,KAAK,WAC7BY,OAAOC,SAASkC,aAKpB/B,EAAgBC,KAGnBY,MAAM,WACLF,QAAQC,IACN,mEArEAoB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAM7C,KAAK,WACjC2B,QAAQC,IACN,+GAMJZ,EAAgBC,MCzCxBgC","file":"static/js/main.a452d3f0.chunk.js","sourcesContent":["export const monthNames = [\n  'January', 'February', 'March', 'April', 'May', 'June',\n  'July', 'August', 'September', 'October', 'November', 'December'\n];\nexport const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport function removeNums(str) {  // removes numbers\n  return str.replace(/[0-9]/g, '');\n}\n\nexport function pad0(n) {  // padding with 0\n  return n > 9 ? n : '0' + n;\n}\n\nexport function getTime(date) {\n  const d = date || new Date();\n  return [d.getHours(), d.getMinutes()].map(pad0).join(':');\n}\n\nexport function getDate(date) {\n  const d = date || new Date();\n  return `${d.getDate()} ${monthNames[d.getMonth()].slice(0, 3)}`;\n}\n","import React from 'react';\nimport { weekDays, removeNums, getTime } from '../helpers';\n\nclass Lab extends React.PureComponent {\n  render() {\n    const { day, data } = this.props;\n    if (!data) return null;\n\n    const { events } = data;\n    const curTime = getTime();\n    const nextClasses = [];\n    let currentClass = null;\n\n    events.forEach(ev => {\n      ev.course.acronym = removeNums(ev.course.acronym);\n\n      if (ev.weekday === weekDays[day].slice(0, 3)) {\n        if (curTime < ev.start || weekDays[day] !== weekDays[new Date().getDay()]) {\n          nextClasses.push(ev);\n        } else if (curTime >= ev.start && curTime <= ev.end) {\n          nextClasses.push(ev);\n          currentClass = ev;\n        }\n      }\n    });\n\n    nextClasses.sort((a, b) => (a.start < b.start) ? -1 : 1);\n\n    return (\n      <div>\n        <h3 className={currentClass ? 'red' : ((nextClasses.length) ? 'blue' : 'green')}>\n          Lab {data.name}\n        </h3>\n        {nextClasses.map((cl, i) => (\n          <span key={i}>\n            <strong>{cl.start} â€“ {cl.end}</strong> {cl.course.acronym}\n          </span>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Lab;\n","import React from 'react';\nimport Lab from './Lab';\nimport './App.css';\nimport { weekDays, getTime, getDate } from '../helpers';\n\nconst URL = 'https://web.tecnico.ulisboa.pt/~ist178013/labevents/?lab=';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nextDay = this.nextDay.bind(this);\n    this.state = {\n      date: getDate(),\n      time: getTime(),\n      dow: new Date().getDay(), // day of week\n      labs: [\n        { id: 2448131365220, data: null }, // 1 - 15\n        { id: 2448131365221, data: null }, // 1 - 17\n        { id: 2448131365222, data: null }, // 1 - 19\n        { id: 2448131365227, data: null }, // 1 - 27\n        { id: 2448131365229, data: null }, // 1 - 29\n        { id: 2448131365166, data: null }, // 0 - 14\n      ],\n    };\n  }\n\n  componentWillMount() {\n    const { labs } = this.state;\n    labs.forEach(lab => {\n      fetch(URL + lab.id)\n        .then((res) => res.json())\n        .then((data) => {\n          lab.data = data;\n          this.setState({ labs });\n        });\n    });\n  }\n\n  nextDay() {\n    const { dow } = this.state;\n    const d = new Date();\n    const newDow = ((dow >= 5) ? 0 : dow) + 1;\n    d.setDate(d.getDate() + (newDow - d.getDay()));\n\n    this.setState({\n      date: getDate(d),\n      time: getTime(),\n      dow: newDow,\n    });\n  }\n\n  render() {\n    const { dow, date, time, labs } = this.state;\n\n    return (\n      <main>\n        <header onClick={this.nextDay}>\n          <h3>\n            <span>{`${weekDays[dow].slice(0, 3)}, ${date}`}</span>\n            <span className={'right'}>{time}</span>\n          </h3>\n        </header>\n        <section id=\"infos\">\n          {labs.map((lab) => (lab.data && <Lab key={lab.id} day={dow} data={lab.data} />))}\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}